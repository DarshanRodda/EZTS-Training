class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
        self.height=1

def insertNode(root,data):
    if root is None:
        root=Node(data)
    else:
        if data<root.data:
            root.left=insertNode(root.left,data)
        else:
            root.right=insertNode(root.right,data)
    root.height=1+max(ght(root.left),ght(root.right))
    bf=getBF(root)
    
    #RR
    if bf>1 and data<root.left.data:
        return rightRotation(root)
    
    #
    if bf>1 and data>root.left.data:
        root.left=leftRotation(root.left)
        return rightRotation(root)
    
    if bf<-1 and data>root.right.data:
        return leftRotation(root)
    
    if bf<-1 and root.right.data>data:
        root.right=rightRotation(root.right)
        return leftRotation(root)

    return root

def ght(root):
    if root is None:
        return 0
    return root.height

def getBF(root):
    if root is None:
        return 0
    return ght(root.left)-ght(root.right)

def leftRotation(A):
    B=A.right
    temp=B.left
    B.left=A
    A.right=temp

    A.height=1+max(ght(A.left),ght(A.right))
    B.height=1+max(ght(B.left),ght(B.right))  

    return B

def rightRotation(A):
    B=A.left
    temp=B.right
    B.right=A
    A.left=temp

    A.height=1+max(ght(A.left),ght(A.right))
    B.height=1+max(ght(B.left),ght(B.right))

    return B

def inOrder(root):
    if root is None:
        return
    inOrder(root.left)
    print(root.data,end=" ")
    inOrder(root.right)

if __name__=="__main__":
    vl=[19,99,75,7,21,34,27,134,100,29,0,12,17,143]
    root=None
    for  i in vl:
        root=insertNode(root,i)
inOrder(root)
